#!/usr/bin/env python2
from __future__ import print_function
import os
import sys
import time
import threading
import argparse
from telemetric.client import init, open_sockets, tcp_loop, udp_loop

###############################################################################
# Main
###############################################################################

# Set up argument parsing
parser = argparse.ArgumentParser(description="")

parser.add_argument("--ip-address",
                    required=True,
                    type=str)

parser.add_argument("--port",
                    required=True,
                    type=int)

parser.add_argument("--protos",
                    required=False,
                    type=str,
                    nargs = '*',
                    default=[],
                    help = "List of .proto files to be received in messages")

parser.add_argument("--print-all",
                    required=False,
                    action='store_true',
                    help = "Display data for all items instead of just the first")

parser.add_argument("--brief",
                    required=False,
                    action='store_true',
                    help = "Only display message headers, no data")

parser.add_argument("--json-dump",
                    required=False,
                    action='store_true',
                    help = "Dump JSON messages instead of pretty-printing")

# Parse all arguments and bind to the specified IP address and port
args = parser.parse_args(sys.argv[1:])
tcp_sock, udp_sock = open_sockets(args.ip_address, args.port)
init(args.protos)

# Spawn threads to listen on the TCP and UDP sockets
kwargs = {'json_dump': args.json_dump,
          'print_all': args.print_all}
tcp_thread = threading.Thread(target=tcp_loop, args=(tcp_sock,), kwargs=kwargs)
tcp_thread.daemon = True
tcp_thread.start()

udp_thread = threading.Thread(target=udp_loop, args=(udp_sock,), kwargs=kwargs)
udp_thread.daemon = True
udp_thread.start()

done = False
while not done:
    try:
        time.sleep(60)
    except KeyboardInterrupt:
        done = True
